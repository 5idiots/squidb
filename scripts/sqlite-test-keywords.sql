-- For use in generating the code that goes in the SqlKeywords class in squidb-processor
create table ABORT (ABORT text primary key);
select 'ALL_KEYWORDS.add("ABORT");' || (case (exists (select * from sqlite_master where type='table' and name='ABORT')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("ABORT");' end);
drop table ABORT;
create table ACTION (ACTION text primary key);
select 'ALL_KEYWORDS.add("ACTION");' || (case (exists (select * from sqlite_master where type='table' and name='ACTION')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("ACTION");' end);
drop table ACTION;
create table ADD (ADD text primary key);
select 'ALL_KEYWORDS.add("ADD");' || (case (exists (select * from sqlite_master where type='table' and name='ADD')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("ADD");' end);
drop table ADD;
create table AFTER (AFTER text primary key);
select 'ALL_KEYWORDS.add("AFTER");' || (case (exists (select * from sqlite_master where type='table' and name='AFTER')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("AFTER");' end);
drop table AFTER;
create table ALL (ALL text primary key);
select 'ALL_KEYWORDS.add("ALL");' || (case (exists (select * from sqlite_master where type='table' and name='ALL')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("ALL");' end);
drop table ALL;
create table ALTER (ALTER text primary key);
select 'ALL_KEYWORDS.add("ALTER");' || (case (exists (select * from sqlite_master where type='table' and name='ALTER')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("ALTER");' end);
drop table ALTER;
create table ANALYZE (ANALYZE text primary key);
select 'ALL_KEYWORDS.add("ANALYZE");' || (case (exists (select * from sqlite_master where type='table' and name='ANALYZE')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("ANALYZE");' end);
drop table ANALYZE;
create table AND (AND text primary key);
select 'ALL_KEYWORDS.add("AND");' || (case (exists (select * from sqlite_master where type='table' and name='AND')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("AND");' end);
drop table AND;
create table AS (AS text primary key);
select 'ALL_KEYWORDS.add("AS");' || (case (exists (select * from sqlite_master where type='table' and name='AS')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("AS");' end);
drop table AS;
create table ASC (ASC text primary key);
select 'ALL_KEYWORDS.add("ASC");' || (case (exists (select * from sqlite_master where type='table' and name='ASC')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("ASC");' end);
drop table ASC;
create table ATTACH (ATTACH text primary key);
select 'ALL_KEYWORDS.add("ATTACH");' || (case (exists (select * from sqlite_master where type='table' and name='ATTACH')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("ATTACH");' end);
drop table ATTACH;
create table AUTOINCREMENT (AUTOINCREMENT text primary key);
select 'ALL_KEYWORDS.add("AUTOINCREMENT");' || (case (exists (select * from sqlite_master where type='table' and name='AUTOINCREMENT')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("AUTOINCREMENT");' end);
drop table AUTOINCREMENT;
create table BEFORE (BEFORE text primary key);
select 'ALL_KEYWORDS.add("BEFORE");' || (case (exists (select * from sqlite_master where type='table' and name='BEFORE')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("BEFORE");' end);
drop table BEFORE;
create table BEGIN (BEGIN text primary key);
select 'ALL_KEYWORDS.add("BEGIN");' || (case (exists (select * from sqlite_master where type='table' and name='BEGIN')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("BEGIN");' end);
drop table BEGIN;
create table BETWEEN (BETWEEN text primary key);
select 'ALL_KEYWORDS.add("BETWEEN");' || (case (exists (select * from sqlite_master where type='table' and name='BETWEEN')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("BETWEEN");' end);
drop table BETWEEN;
create table BY (BY text primary key);
select 'ALL_KEYWORDS.add("BY");' || (case (exists (select * from sqlite_master where type='table' and name='BY')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("BY");' end);
drop table BY;
create table CASCADE (CASCADE text primary key);
select 'ALL_KEYWORDS.add("CASCADE");' || (case (exists (select * from sqlite_master where type='table' and name='CASCADE')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("CASCADE");' end);
drop table CASCADE;
create table CASE (CASE text primary key);
select 'ALL_KEYWORDS.add("CASE");' || (case (exists (select * from sqlite_master where type='table' and name='CASE')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("CASE");' end);
drop table CASE;
create table CAST (CAST text primary key);
select 'ALL_KEYWORDS.add("CAST");' || (case (exists (select * from sqlite_master where type='table' and name='CAST')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("CAST");' end);
drop table CAST;
create table CHECK (CHECK text primary key);
select 'ALL_KEYWORDS.add("CHECK");' || (case (exists (select * from sqlite_master where type='table' and name='CHECK')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("CHECK");' end);
drop table CHECK;
create table COLLATE (COLLATE text primary key);
select 'ALL_KEYWORDS.add("COLLATE");' || (case (exists (select * from sqlite_master where type='table' and name='COLLATE')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("COLLATE");' end);
drop table COLLATE;
create table COLUMN (COLUMN text primary key);
select 'ALL_KEYWORDS.add("COLUMN");' || (case (exists (select * from sqlite_master where type='table' and name='COLUMN')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("COLUMN");' end);
drop table COLUMN;
create table COMMIT (COMMIT text primary key);
select 'ALL_KEYWORDS.add("COMMIT");' || (case (exists (select * from sqlite_master where type='table' and name='COMMIT')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("COMMIT");' end);
drop table COMMIT;
create table CONFLICT (CONFLICT text primary key);
select 'ALL_KEYWORDS.add("CONFLICT");' || (case (exists (select * from sqlite_master where type='table' and name='CONFLICT')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("CONFLICT");' end);
drop table CONFLICT;
create table CONSTRAINT (CONSTRAINT text primary key);
select 'ALL_KEYWORDS.add("CONSTRAINT");' || (case (exists (select * from sqlite_master where type='table' and name='CONSTRAINT')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("CONSTRAINT");' end);
drop table CONSTRAINT;
create table CREATE (CREATE text primary key);
select 'ALL_KEYWORDS.add("CREATE");' || (case (exists (select * from sqlite_master where type='table' and name='CREATE')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("CREATE");' end);
drop table CREATE;
create table CROSS (CROSS text primary key);
select 'ALL_KEYWORDS.add("CROSS");' || (case (exists (select * from sqlite_master where type='table' and name='CROSS')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("CROSS");' end);
drop table CROSS;
create table CURRENT_DATE (CURRENT_DATE text primary key);
select 'ALL_KEYWORDS.add("CURRENT_DATE");' || (case (exists (select * from sqlite_master where type='table' and name='CURRENT_DATE')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("CURRENT_DATE");' end);
drop table CURRENT_DATE;
create table CURRENT_TIME (CURRENT_TIME text primary key);
select 'ALL_KEYWORDS.add("CURRENT_TIME");' || (case (exists (select * from sqlite_master where type='table' and name='CURRENT_TIME')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("CURRENT_TIME");' end);
drop table CURRENT_TIME;
create table CURRENT_TIMESTAMP (CURRENT_TIMESTAMP text primary key);
select 'ALL_KEYWORDS.add("CURRENT_TIMESTAMP");' || (case (exists (select * from sqlite_master where type='table' and name='CURRENT_TIMESTAMP')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("CURRENT_TIMESTAMP");' end);
drop table CURRENT_TIMESTAMP;
create table DATABASE (DATABASE text primary key);
select 'ALL_KEYWORDS.add("DATABASE");' || (case (exists (select * from sqlite_master where type='table' and name='DATABASE')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("DATABASE");' end);
drop table DATABASE;
create table DEFAULT (DEFAULT text primary key);
select 'ALL_KEYWORDS.add("DEFAULT");' || (case (exists (select * from sqlite_master where type='table' and name='DEFAULT')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("DEFAULT");' end);
drop table DEFAULT;
create table DEFERRABLE (DEFERRABLE text primary key);
select 'ALL_KEYWORDS.add("DEFERRABLE");' || (case (exists (select * from sqlite_master where type='table' and name='DEFERRABLE')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("DEFERRABLE");' end);
drop table DEFERRABLE;
create table DEFERRED (DEFERRED text primary key);
select 'ALL_KEYWORDS.add("DEFERRED");' || (case (exists (select * from sqlite_master where type='table' and name='DEFERRED')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("DEFERRED");' end);
drop table DEFERRED;
create table DELETE (DELETE text primary key);
select 'ALL_KEYWORDS.add("DELETE");' || (case (exists (select * from sqlite_master where type='table' and name='DELETE')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("DELETE");' end);
drop table DELETE;
create table DESC (DESC text primary key);
select 'ALL_KEYWORDS.add("DESC");' || (case (exists (select * from sqlite_master where type='table' and name='DESC')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("DESC");' end);
drop table DESC;
create table DETACH (DETACH text primary key);
select 'ALL_KEYWORDS.add("DETACH");' || (case (exists (select * from sqlite_master where type='table' and name='DETACH')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("DETACH");' end);
drop table DETACH;
create table DISTINCT (DISTINCT text primary key);
select 'ALL_KEYWORDS.add("DISTINCT");' || (case (exists (select * from sqlite_master where type='table' and name='DISTINCT')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("DISTINCT");' end);
drop table DISTINCT;
create table DROP (DROP text primary key);
select 'ALL_KEYWORDS.add("DROP");' || (case (exists (select * from sqlite_master where type='table' and name='DROP')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("DROP");' end);
drop table DROP;
create table EACH (EACH text primary key);
select 'ALL_KEYWORDS.add("EACH");' || (case (exists (select * from sqlite_master where type='table' and name='EACH')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("EACH");' end);
drop table EACH;
create table ELSE (ELSE text primary key);
select 'ALL_KEYWORDS.add("ELSE");' || (case (exists (select * from sqlite_master where type='table' and name='ELSE')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("ELSE");' end);
drop table ELSE;
create table END (END text primary key);
select 'ALL_KEYWORDS.add("END");' || (case (exists (select * from sqlite_master where type='table' and name='END')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("END");' end);
drop table END;
create table ESCAPE (ESCAPE text primary key);
select 'ALL_KEYWORDS.add("ESCAPE");' || (case (exists (select * from sqlite_master where type='table' and name='ESCAPE')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("ESCAPE");' end);
drop table ESCAPE;
create table EXCEPT (EXCEPT text primary key);
select 'ALL_KEYWORDS.add("EXCEPT");' || (case (exists (select * from sqlite_master where type='table' and name='EXCEPT')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("EXCEPT");' end);
drop table EXCEPT;
create table EXCLUSIVE (EXCLUSIVE text primary key);
select 'ALL_KEYWORDS.add("EXCLUSIVE");' || (case (exists (select * from sqlite_master where type='table' and name='EXCLUSIVE')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("EXCLUSIVE");' end);
drop table EXCLUSIVE;
create table EXISTS (EXISTS text primary key);
select 'ALL_KEYWORDS.add("EXISTS");' || (case (exists (select * from sqlite_master where type='table' and name='EXISTS')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("EXISTS");' end);
drop table EXISTS;
create table EXPLAIN (EXPLAIN text primary key);
select 'ALL_KEYWORDS.add("EXPLAIN");' || (case (exists (select * from sqlite_master where type='table' and name='EXPLAIN')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("EXPLAIN");' end);
drop table EXPLAIN;
create table FAIL (FAIL text primary key);
select 'ALL_KEYWORDS.add("FAIL");' || (case (exists (select * from sqlite_master where type='table' and name='FAIL')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("FAIL");' end);
drop table FAIL;
create table FOR (FOR text primary key);
select 'ALL_KEYWORDS.add("FOR");' || (case (exists (select * from sqlite_master where type='table' and name='FOR')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("FOR");' end);
drop table FOR;
create table FOREIGN (FOREIGN text primary key);
select 'ALL_KEYWORDS.add("FOREIGN");' || (case (exists (select * from sqlite_master where type='table' and name='FOREIGN')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("FOREIGN");' end);
drop table FOREIGN;
create table FROM (FROM text primary key);
select 'ALL_KEYWORDS.add("FROM");' || (case (exists (select * from sqlite_master where type='table' and name='FROM')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("FROM");' end);
drop table FROM;
create table FULL (FULL text primary key);
select 'ALL_KEYWORDS.add("FULL");' || (case (exists (select * from sqlite_master where type='table' and name='FULL')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("FULL");' end);
drop table FULL;
create table GLOB (GLOB text primary key);
select 'ALL_KEYWORDS.add("GLOB");' || (case (exists (select * from sqlite_master where type='table' and name='GLOB')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("GLOB");' end);
drop table GLOB;
create table GROUP (GROUP text primary key);
select 'ALL_KEYWORDS.add("GROUP");' || (case (exists (select * from sqlite_master where type='table' and name='GROUP')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("GROUP");' end);
drop table GROUP;
create table HAVING (HAVING text primary key);
select 'ALL_KEYWORDS.add("HAVING");' || (case (exists (select * from sqlite_master where type='table' and name='HAVING')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("HAVING");' end);
drop table HAVING;
create table IF (IF text primary key);
select 'ALL_KEYWORDS.add("IF");' || (case (exists (select * from sqlite_master where type='table' and name='IF')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("IF");' end);
drop table IF;
create table IGNORE (IGNORE text primary key);
select 'ALL_KEYWORDS.add("IGNORE");' || (case (exists (select * from sqlite_master where type='table' and name='IGNORE')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("IGNORE");' end);
drop table IGNORE;
create table IMMEDIATE (IMMEDIATE text primary key);
select 'ALL_KEYWORDS.add("IMMEDIATE");' || (case (exists (select * from sqlite_master where type='table' and name='IMMEDIATE')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("IMMEDIATE");' end);
drop table IMMEDIATE;
create table IN (IN text primary key);
select 'ALL_KEYWORDS.add("IN");' || (case (exists (select * from sqlite_master where type='table' and name='IN')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("IN");' end);
drop table IN;
create table INDEX (INDEX text primary key);
select 'ALL_KEYWORDS.add("INDEX");' || (case (exists (select * from sqlite_master where type='table' and name='INDEX')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("INDEX");' end);
drop table INDEX;
create table INDEXED (INDEXED text primary key);
select 'ALL_KEYWORDS.add("INDEXED");' || (case (exists (select * from sqlite_master where type='table' and name='INDEXED')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("INDEXED");' end);
drop table INDEXED;
create table INITIALLY (INITIALLY text primary key);
select 'ALL_KEYWORDS.add("INITIALLY");' || (case (exists (select * from sqlite_master where type='table' and name='INITIALLY')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("INITIALLY");' end);
drop table INITIALLY;
create table INNER (INNER text primary key);
select 'ALL_KEYWORDS.add("INNER");' || (case (exists (select * from sqlite_master where type='table' and name='INNER')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("INNER");' end);
drop table INNER;
create table INSERT (INSERT text primary key);
select 'ALL_KEYWORDS.add("INSERT");' || (case (exists (select * from sqlite_master where type='table' and name='INSERT')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("INSERT");' end);
drop table INSERT;
create table INSTEAD (INSTEAD text primary key);
select 'ALL_KEYWORDS.add("INSTEAD");' || (case (exists (select * from sqlite_master where type='table' and name='INSTEAD')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("INSTEAD");' end);
drop table INSTEAD;
create table INTERSECT (INTERSECT text primary key);
select 'ALL_KEYWORDS.add("INTERSECT");' || (case (exists (select * from sqlite_master where type='table' and name='INTERSECT')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("INTERSECT");' end);
drop table INTERSECT;
create table INTO (INTO text primary key);
select 'ALL_KEYWORDS.add("INTO");' || (case (exists (select * from sqlite_master where type='table' and name='INTO')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("INTO");' end);
drop table INTO;
create table IS (IS text primary key);
select 'ALL_KEYWORDS.add("IS");' || (case (exists (select * from sqlite_master where type='table' and name='IS')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("IS");' end);
drop table IS;
create table ISNULL (ISNULL text primary key);
select 'ALL_KEYWORDS.add("ISNULL");' || (case (exists (select * from sqlite_master where type='table' and name='ISNULL')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("ISNULL");' end);
drop table ISNULL;
create table JOIN (JOIN text primary key);
select 'ALL_KEYWORDS.add("JOIN");' || (case (exists (select * from sqlite_master where type='table' and name='JOIN')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("JOIN");' end);
drop table JOIN;
create table KEY (KEY text primary key);
select 'ALL_KEYWORDS.add("KEY");' || (case (exists (select * from sqlite_master where type='table' and name='KEY')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("KEY");' end);
drop table KEY;
create table LEFT (LEFT text primary key);
select 'ALL_KEYWORDS.add("LEFT");' || (case (exists (select * from sqlite_master where type='table' and name='LEFT')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("LEFT");' end);
drop table LEFT;
create table LIKE (LIKE text primary key);
select 'ALL_KEYWORDS.add("LIKE");' || (case (exists (select * from sqlite_master where type='table' and name='LIKE')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("LIKE");' end);
drop table LIKE;
create table LIMIT (LIMIT text primary key);
select 'ALL_KEYWORDS.add("LIMIT");' || (case (exists (select * from sqlite_master where type='table' and name='LIMIT')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("LIMIT");' end);
drop table LIMIT;
create table MATCH (MATCH text primary key);
select 'ALL_KEYWORDS.add("MATCH");' || (case (exists (select * from sqlite_master where type='table' and name='MATCH')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("MATCH");' end);
drop table MATCH;
create table NATURAL (NATURAL text primary key);
select 'ALL_KEYWORDS.add("NATURAL");' || (case (exists (select * from sqlite_master where type='table' and name='NATURAL')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("NATURAL");' end);
drop table NATURAL;
create table NO (NO text primary key);
select 'ALL_KEYWORDS.add("NO");' || (case (exists (select * from sqlite_master where type='table' and name='NO')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("NO");' end);
drop table NO;
create table NOT (NOT text primary key);
select 'ALL_KEYWORDS.add("NOT");' || (case (exists (select * from sqlite_master where type='table' and name='NOT')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("NOT");' end);
drop table NOT;
create table NOTNULL (NOTNULL text primary key);
select 'ALL_KEYWORDS.add("NOTNULL");' || (case (exists (select * from sqlite_master where type='table' and name='NOTNULL')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("NOTNULL");' end);
drop table NOTNULL;
create table NULL (NULL text primary key);
select 'ALL_KEYWORDS.add("NULL");' || (case (exists (select * from sqlite_master where type='table' and name='NULL')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("NULL");' end);
drop table NULL;
create table OF (OF text primary key);
select 'ALL_KEYWORDS.add("OF");' || (case (exists (select * from sqlite_master where type='table' and name='OF')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("OF");' end);
drop table OF;
create table OFFSET (OFFSET text primary key);
select 'ALL_KEYWORDS.add("OFFSET");' || (case (exists (select * from sqlite_master where type='table' and name='OFFSET')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("OFFSET");' end);
drop table OFFSET;
create table ON (ON text primary key);
select 'ALL_KEYWORDS.add("ON");' || (case (exists (select * from sqlite_master where type='table' and name='ON')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("ON");' end);
drop table ON;
create table OR (OR text primary key);
select 'ALL_KEYWORDS.add("OR");' || (case (exists (select * from sqlite_master where type='table' and name='OR')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("OR");' end);
drop table OR;
create table ORDER (ORDER text primary key);
select 'ALL_KEYWORDS.add("ORDER");' || (case (exists (select * from sqlite_master where type='table' and name='ORDER')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("ORDER");' end);
drop table ORDER;
create table OUTER (OUTER text primary key);
select 'ALL_KEYWORDS.add("OUTER");' || (case (exists (select * from sqlite_master where type='table' and name='OUTER')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("OUTER");' end);
drop table OUTER;
create table PLAN (PLAN text primary key);
select 'ALL_KEYWORDS.add("PLAN");' || (case (exists (select * from sqlite_master where type='table' and name='PLAN')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("PLAN");' end);
drop table PLAN;
create table PRAGMA (PRAGMA text primary key);
select 'ALL_KEYWORDS.add("PRAGMA");' || (case (exists (select * from sqlite_master where type='table' and name='PRAGMA')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("PRAGMA");' end);
drop table PRAGMA;
create table PRIMARY (PRIMARY text primary key);
select 'ALL_KEYWORDS.add("PRIMARY");' || (case (exists (select * from sqlite_master where type='table' and name='PRIMARY')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("PRIMARY");' end);
drop table PRIMARY;
create table QUERY (QUERY text primary key);
select 'ALL_KEYWORDS.add("QUERY");' || (case (exists (select * from sqlite_master where type='table' and name='QUERY')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("QUERY");' end);
drop table QUERY;
create table RAISE (RAISE text primary key);
select 'ALL_KEYWORDS.add("RAISE");' || (case (exists (select * from sqlite_master where type='table' and name='RAISE')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("RAISE");' end);
drop table RAISE;
create table RECURSIVE (RECURSIVE text primary key);
select 'ALL_KEYWORDS.add("RECURSIVE");' || (case (exists (select * from sqlite_master where type='table' and name='RECURSIVE')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("RECURSIVE");' end);
drop table RECURSIVE;
create table REFERENCES (REFERENCES text primary key);
select 'ALL_KEYWORDS.add("REFERENCES");' || (case (exists (select * from sqlite_master where type='table' and name='REFERENCES')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("REFERENCES");' end);
drop table REFERENCES;
create table REGEXP (REGEXP text primary key);
select 'ALL_KEYWORDS.add("REGEXP");' || (case (exists (select * from sqlite_master where type='table' and name='REGEXP')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("REGEXP");' end);
drop table REGEXP;
create table REINDEX (REINDEX text primary key);
select 'ALL_KEYWORDS.add("REINDEX");' || (case (exists (select * from sqlite_master where type='table' and name='REINDEX')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("REINDEX");' end);
drop table REINDEX;
create table RELEASE (RELEASE text primary key);
select 'ALL_KEYWORDS.add("RELEASE");' || (case (exists (select * from sqlite_master where type='table' and name='RELEASE')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("RELEASE");' end);
drop table RELEASE;
create table RENAME (RENAME text primary key);
select 'ALL_KEYWORDS.add("RENAME");' || (case (exists (select * from sqlite_master where type='table' and name='RENAME')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("RENAME");' end);
drop table RENAME;
create table REPLACE (REPLACE text primary key);
select 'ALL_KEYWORDS.add("REPLACE");' || (case (exists (select * from sqlite_master where type='table' and name='REPLACE')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("REPLACE");' end);
drop table REPLACE;
create table RESTRICT (RESTRICT text primary key);
select 'ALL_KEYWORDS.add("RESTRICT");' || (case (exists (select * from sqlite_master where type='table' and name='RESTRICT')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("RESTRICT");' end);
drop table RESTRICT;
create table RIGHT (RIGHT text primary key);
select 'ALL_KEYWORDS.add("RIGHT");' || (case (exists (select * from sqlite_master where type='table' and name='RIGHT')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("RIGHT");' end);
drop table RIGHT;
create table ROLLBACK (ROLLBACK text primary key);
select 'ALL_KEYWORDS.add("ROLLBACK");' || (case (exists (select * from sqlite_master where type='table' and name='ROLLBACK')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("ROLLBACK");' end);
drop table ROLLBACK;
create table ROW (ROW text primary key);
select 'ALL_KEYWORDS.add("ROW");' || (case (exists (select * from sqlite_master where type='table' and name='ROW')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("ROW");' end);
drop table ROW;
create table SAVEPOINT (SAVEPOINT text primary key);
select 'ALL_KEYWORDS.add("SAVEPOINT");' || (case (exists (select * from sqlite_master where type='table' and name='SAVEPOINT')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("SAVEPOINT");' end);
drop table SAVEPOINT;
create table SELECT (SELECT text primary key);
select 'ALL_KEYWORDS.add("SELECT");' || (case (exists (select * from sqlite_master where type='table' and name='SELECT')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("SELECT");' end);
drop table SELECT;
create table SET (SET text primary key);
select 'ALL_KEYWORDS.add("SET");' || (case (exists (select * from sqlite_master where type='table' and name='SET')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("SET");' end);
drop table SET;
create table TABLE (TABLE text primary key);
select 'ALL_KEYWORDS.add("TABLE");' || (case (exists (select * from sqlite_master where type='table' and name='TABLE')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("TABLE");' end);
drop table TABLE;
create table TEMP (TEMP text primary key);
select 'ALL_KEYWORDS.add("TEMP");' || (case (exists (select * from sqlite_master where type='table' and name='TEMP')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("TEMP");' end);
drop table TEMP;
create table TEMPORARY (TEMPORARY text primary key);
select 'ALL_KEYWORDS.add("TEMPORARY");' || (case (exists (select * from sqlite_master where type='table' and name='TEMPORARY')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("TEMPORARY");' end);
drop table TEMPORARY;
create table THEN (THEN text primary key);
select 'ALL_KEYWORDS.add("THEN");' || (case (exists (select * from sqlite_master where type='table' and name='THEN')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("THEN");' end);
drop table THEN;
create table TO (TO text primary key);
select 'ALL_KEYWORDS.add("TO");' || (case (exists (select * from sqlite_master where type='table' and name='TO')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("TO");' end);
drop table TO;
create table TRANSACTION (TRANSACTION text primary key);
select 'ALL_KEYWORDS.add("TRANSACTION");' || (case (exists (select * from sqlite_master where type='table' and name='TRANSACTION')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("TRANSACTION");' end);
drop table TRANSACTION;
create table TRIGGER (TRIGGER text primary key);
select 'ALL_KEYWORDS.add("TRIGGER");' || (case (exists (select * from sqlite_master where type='table' and name='TRIGGER')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("TRIGGER");' end);
drop table TRIGGER;
create table UNION (UNION text primary key);
select 'ALL_KEYWORDS.add("UNION");' || (case (exists (select * from sqlite_master where type='table' and name='UNION')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("UNION");' end);
drop table UNION;
create table UNIQUE (UNIQUE text primary key);
select 'ALL_KEYWORDS.add("UNIQUE");' || (case (exists (select * from sqlite_master where type='table' and name='UNIQUE')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("UNIQUE");' end);
drop table UNIQUE;
create table UPDATE (UPDATE text primary key);
select 'ALL_KEYWORDS.add("UPDATE");' || (case (exists (select * from sqlite_master where type='table' and name='UPDATE')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("UPDATE");' end);
drop table UPDATE;
create table USING (USING text primary key);
select 'ALL_KEYWORDS.add("USING");' || (case (exists (select * from sqlite_master where type='table' and name='USING')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("USING");' end);
drop table USING;
create table VACUUM (VACUUM text primary key);
select 'ALL_KEYWORDS.add("VACUUM");' || (case (exists (select * from sqlite_master where type='table' and name='VACUUM')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("VACUUM");' end);
drop table VACUUM;
create table VALUES (VALUES text primary key);
select 'ALL_KEYWORDS.add("VALUES");' || (case (exists (select * from sqlite_master where type='table' and name='VALUES')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("VALUES");' end);
drop table VALUES;
create table VIEW (VIEW text primary key);
select 'ALL_KEYWORDS.add("VIEW");' || (case (exists (select * from sqlite_master where type='table' and name='VIEW')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("VIEW");' end);
drop table VIEW;
create table VIRTUAL (VIRTUAL text primary key);
select 'ALL_KEYWORDS.add("VIRTUAL");' || (case (exists (select * from sqlite_master where type='table' and name='VIRTUAL')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("VIRTUAL");' end);
drop table VIRTUAL;
create table WHEN (WHEN text primary key);
select 'ALL_KEYWORDS.add("WHEN");' || (case (exists (select * from sqlite_master where type='table' and name='WHEN')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("WHEN");' end);
drop table WHEN;
create table WHERE (WHERE text primary key);
select 'ALL_KEYWORDS.add("WHERE");' || (case (exists (select * from sqlite_master where type='table' and name='WHERE')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("WHERE");' end);
drop table WHERE;
create table WITH (WITH text primary key);
select 'ALL_KEYWORDS.add("WITH");' || (case (exists (select * from sqlite_master where type='table' and name='WITH')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("WITH");' end);
drop table WITH;
create table WITHOUT (WITHOUT text primary key);
select 'ALL_KEYWORDS.add("WITHOUT");' || (case (exists (select * from sqlite_master where type='table' and name='WITHOUT')) when 1 then '' else ' RESTRICTED_KEYWORDS.add("WITHOUT");' end);
drop table WITHOUT;
